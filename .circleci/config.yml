version: 2.1

parameters:
  should_dig:
    type: boolean
    default: false
  dig_spot:
    type: string
    default: ''
  additional_remote:
    type: string
    default: ''
  base_branch:
    type: string
    default: ''

commands:
  generate-types:
    parameters:
      sha-file:
        type: string
      filename:
        type: string
    steps:
      - run:
          name: Generating Types for SHA in << parameters.sha-file >>
          command: |
            git checkout $(cat << parameters.sha-file >>)
            rm -rf node_modules
            yarn install --frozen-lockfile
            echo "#!/usr/bin/env node\nglobal.x=1" > node_modules/typescript/bin/tsc
            node node_modules/.bin/electron-docs-parser --dir=./ --outDir=./ --moduleVersion=0.0.0-development
            node node_modules/.bin/electron-typescript-definitions --api=electron-api.json --outDir=artifacts
            mv artifacts/electron.d.ts artifacts/<< parameters.filename >>
            git checkout .

jobs:
  build:
    docker:
      - image: cimg/node:20.13
    working_directory: ~/repo
    steps:
      - checkout

  dig:
    docker:
      - image: cimg/node:20.13
    working_directory: ~/electron
    steps:
      - run:
          name: Setting Up Dig Site
          command: |
            git clone https://github.com/electron/electron.git .
            mkdir -p artifacts
            git remote add fork << pipeline.parameters.additional_remote >> && git fetch fork
            git checkout << pipeline.parameters.dig_spot >>
            git merge-base origin/<< pipeline.parameters.base_branch >> HEAD > .dig-old
            echo << pipeline.parameters.dig_spot >> > .dig-new
            cp .dig-old artifacts
      - generate-types:
          sha-file: .dig-new
          filename: electron.new.d.ts
      - generate-types:
          sha-file: .dig-old
          filename: electron.old.d.ts
      - store_artifacts:
          path: artifacts

workflows:
  version: 2
  build:
    when:
      equal: [ << pipeline.parameters.should_dig >>, false ]
    jobs:
      - build
  
  dig:
    when:
      equal: [ << pipeline.parameters.should_dig >>, true ]
    jobs:
      - dig
